{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP/bR4RpkXdfhw1HyUtCHEH"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":5,"metadata":{"id":"80tXY3uqcQ9O","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1757307489261,"user_tz":-480,"elapsed":1990,"user":{"displayName":"Muhammad Andi Ubaidillah","userId":"10941764502761508051"}},"outputId":"62fa871c-a5f1-423f-b7e1-cabe1c1df9c2"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["import pandas as pd\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","datasheet = '/content/drive/My Drive/Datasheet/dataset_sdn.csv'\n","\n","df = pd.read_csv(datasheet)"]},{"cell_type":"code","source":["print(\"Jumlah Missing Values\")\n","print(df.isnull().sum())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"teA6Shnwebwx","executionInfo":{"status":"ok","timestamp":1757307535617,"user_tz":-480,"elapsed":28,"user":{"displayName":"Muhammad Andi Ubaidillah","userId":"10941764502761508051"}},"outputId":"5c759db6-c31b-431e-a134-e3b264b67a54"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Jumlah Missing Values\n","dt               0\n","switch           0\n","src              0\n","dst              0\n","pktcount         0\n","bytecount        0\n","dur              0\n","dur_nsec         0\n","tot_dur          0\n","flows            0\n","packetins        0\n","pktperflow       0\n","byteperflow      0\n","pktrate          0\n","Pairflow         0\n","Protocol         0\n","port_no          0\n","tx_bytes         0\n","rx_bytes         0\n","tx_kbps          0\n","rx_kbps        506\n","tot_kbps       506\n","label            0\n","dtype: int64\n"]}]},{"cell_type":"code","source":["df = df.dropna(subset=['tx_kbps','tot_kbps'])\n","df['label'] = df['label'].astype(int)\n","\n","df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lOcaVwM7elhx","executionInfo":{"status":"ok","timestamp":1757307565802,"user_tz":-480,"elapsed":44,"user":{"displayName":"Muhammad Andi Ubaidillah","userId":"10941764502761508051"}},"outputId":"7751aa99-0681-40e9-8ffc-6a77e9a7d3bd"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Index: 103839 entries, 0 to 104344\n","Data columns (total 23 columns):\n"," #   Column       Non-Null Count   Dtype  \n","---  ------       --------------   -----  \n"," 0   dt           103839 non-null  int64  \n"," 1   switch       103839 non-null  int64  \n"," 2   src          103839 non-null  object \n"," 3   dst          103839 non-null  object \n"," 4   pktcount     103839 non-null  int64  \n"," 5   bytecount    103839 non-null  int64  \n"," 6   dur          103839 non-null  int64  \n"," 7   dur_nsec     103839 non-null  int64  \n"," 8   tot_dur      103839 non-null  float64\n"," 9   flows        103839 non-null  int64  \n"," 10  packetins    103839 non-null  int64  \n"," 11  pktperflow   103839 non-null  int64  \n"," 12  byteperflow  103839 non-null  int64  \n"," 13  pktrate      103839 non-null  int64  \n"," 14  Pairflow     103839 non-null  int64  \n"," 15  Protocol     103839 non-null  object \n"," 16  port_no      103839 non-null  int64  \n"," 17  tx_bytes     103839 non-null  int64  \n"," 18  rx_bytes     103839 non-null  int64  \n"," 19  tx_kbps      103839 non-null  int64  \n"," 20  rx_kbps      103839 non-null  float64\n"," 21  tot_kbps     103839 non-null  float64\n"," 22  label        103839 non-null  int64  \n","dtypes: float64(3), int64(17), object(3)\n","memory usage: 19.0+ MB\n"]}]},{"cell_type":"code","source":["from sklearn.preprocessing import OneHotEncoder\n","\n","df['Protocol'] = df['Protocol'].astype(str)\n","\n","encoder = OneHotEncoder(sparse_output=False)\n","encoded_clean = encoder.fit_transform(df[['Protocol']]).astype(int)\n","encoded_clean = pd.DataFrame(\n","    encoded_clean,\n","    columns=encoder.get_feature_names_out(['Protocol']),\n","    index=df.index #Baris tetap sinkron\n",")\n","df = pd.concat([df.drop(columns=['Protocol']), encoded_clean], axis=1)\n","df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lp-bjiwBe-YS","executionInfo":{"status":"ok","timestamp":1757307740728,"user_tz":-480,"elapsed":85,"user":{"displayName":"Muhammad Andi Ubaidillah","userId":"10941764502761508051"}},"outputId":"d58f2103-7d62-4516-82b0-eff9de92bae7"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Index: 103839 entries, 0 to 104344\n","Data columns (total 25 columns):\n"," #   Column         Non-Null Count   Dtype  \n","---  ------         --------------   -----  \n"," 0   dt             103839 non-null  int64  \n"," 1   switch         103839 non-null  int64  \n"," 2   src            103839 non-null  object \n"," 3   dst            103839 non-null  object \n"," 4   pktcount       103839 non-null  int64  \n"," 5   bytecount      103839 non-null  int64  \n"," 6   dur            103839 non-null  int64  \n"," 7   dur_nsec       103839 non-null  int64  \n"," 8   tot_dur        103839 non-null  float64\n"," 9   flows          103839 non-null  int64  \n"," 10  packetins      103839 non-null  int64  \n"," 11  pktperflow     103839 non-null  int64  \n"," 12  byteperflow    103839 non-null  int64  \n"," 13  pktrate        103839 non-null  int64  \n"," 14  Pairflow       103839 non-null  int64  \n"," 15  port_no        103839 non-null  int64  \n"," 16  tx_bytes       103839 non-null  int64  \n"," 17  rx_bytes       103839 non-null  int64  \n"," 18  tx_kbps        103839 non-null  int64  \n"," 19  rx_kbps        103839 non-null  float64\n"," 20  tot_kbps       103839 non-null  float64\n"," 21  label          103839 non-null  int64  \n"," 22  Protocol_ICMP  103839 non-null  int64  \n"," 23  Protocol_TCP   103839 non-null  int64  \n"," 24  Protocol_UDP   103839 non-null  int64  \n","dtypes: float64(3), int64(20), object(2)\n","memory usage: 20.6+ MB\n"]}]},{"cell_type":"code","source":["Features = [\n","    'dt','dur','dur_nsec','tot_dur','pktrate','Protocol_ICMP','Protocol_TCP','Protocol_UDP',\n","    'port_no','tx_kbps','rx_kbps','tot_kbps'\n","]\n","df_clean.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JLvUwEzWfK0D","executionInfo":{"status":"ok","timestamp":1757307972104,"user_tz":-480,"elapsed":17,"user":{"displayName":"Muhammad Andi Ubaidillah","userId":"10941764502761508051"}},"outputId":"05b44576-d205-4766-cef0-448e0f26dfe9"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Index: 103839 entries, 0 to 104344\n","Data columns (total 12 columns):\n"," #   Column         Non-Null Count   Dtype  \n","---  ------         --------------   -----  \n"," 0   dt             103839 non-null  int64  \n"," 1   dur            103839 non-null  int64  \n"," 2   dur_nsec       103839 non-null  int64  \n"," 3   tot_dur        103839 non-null  float64\n"," 4   pktrate        103839 non-null  int64  \n"," 5   Protocol_ICMP  103839 non-null  int64  \n"," 6   Protocol_TCP   103839 non-null  int64  \n"," 7   Protocol_UDP   103839 non-null  int64  \n"," 8   port_no        103839 non-null  int64  \n"," 9   tx_kbps        103839 non-null  int64  \n"," 10  rx_kbps        103839 non-null  float64\n"," 11  tot_kbps       103839 non-null  float64\n","dtypes: float64(3), int64(9)\n","memory usage: 10.3 MB\n"]}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","\n","x = df_clean[Features]\n","y = df['label']"],"metadata":{"id":"yWJVlkGBfO6L","executionInfo":{"status":"ok","timestamp":1757307991432,"user_tz":-480,"elapsed":17,"user":{"displayName":"Muhammad Andi Ubaidillah","userId":"10941764502761508051"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["x_train, x_test, y_train, y_test = train_test_split(\n","    x,y, test_size=0.2, random_state=42, stratify=y\n",")"],"metadata":{"id":"ETLZiVpOfUB6","executionInfo":{"status":"ok","timestamp":1757307994668,"user_tz":-480,"elapsed":69,"user":{"displayName":"Muhammad Andi Ubaidillah","userId":"10941764502761508051"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler\n","\n","scaler = StandardScaler()\n","x_train_scaled = scaler.fit_transform(x_train)\n","x_test_scaled = scaler.transform(x_test)"],"metadata":{"id":"j0_uhio9fjMe","executionInfo":{"status":"ok","timestamp":1757308006763,"user_tz":-480,"elapsed":41,"user":{"displayName":"Muhammad Andi Ubaidillah","userId":"10941764502761508051"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["import tensorflow as tf\n","from tensorflow import keras\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Dropout\n","from tensorflow.keras import layers\n","\n","num_classes = 2\n","model = keras.Sequential([\n","    #Layer 1\n","    layers.Dense(units=112, activation='relu', input_shape=(x_train_scaled.shape[1],)),\n","    layers.Dropout(0.0), #No Dropout\n","\n","    #Layer 2\n","    layers.Dense(units=128, activation='relu'),\n","    layers.Dropout(0.1),\n","\n","    #Layer 3\n","    layers.Dense(units=64, activation='tanh'),\n","    layers.Dropout(0.0),\n","\n","    #Output Layers\n","    layers.Dense(units=num_classes, activation='softmax')\n","])\n","\n","learning_rate = 0.0009739768003064985\n","\n","model.compile(\n","    optimizer=keras.optimizers.Adam(learning_rate=learning_rate),\n","    loss='sparse_categorical_crossentropy',\n","    metrics=['accuracy']\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JeAa1fNdgMiD","executionInfo":{"status":"ok","timestamp":1757311064302,"user_tz":-480,"elapsed":53,"user":{"displayName":"Muhammad Andi Ubaidillah","userId":"10941764502761508051"}},"outputId":"d8630ad8-6ec6-4460-fe82-69717c68a09a"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.12/dist-packages/keras/src/layers/core/dense.py:93: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]}]},{"cell_type":"code","source":["model.fit(\n","    x_train_scaled,\n","    y_train,\n","    epochs=50,\n","    validation_data=(x_test_scaled, y_test)\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zIMsDRyZyg_3","executionInfo":{"status":"ok","timestamp":1757312718669,"user_tz":-480,"elapsed":703651,"user":{"displayName":"Muhammad Andi Ubaidillah","userId":"10941764502761508051"}},"outputId":"c333cad4-6cf9-45f0-cdb9-ec0aadc3e3dd"},"execution_count":44,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 4ms/step - accuracy: 0.9858 - loss: 0.0358 - val_accuracy: 0.9834 - val_loss: 0.0409\n","Epoch 2/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 4ms/step - accuracy: 0.9850 - loss: 0.0376 - val_accuracy: 0.9850 - val_loss: 0.0356\n","Epoch 3/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 5ms/step - accuracy: 0.9859 - loss: 0.0358 - val_accuracy: 0.9863 - val_loss: 0.0343\n","Epoch 4/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 4ms/step - accuracy: 0.9854 - loss: 0.0380 - val_accuracy: 0.9855 - val_loss: 0.0395\n","Epoch 5/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 4ms/step - accuracy: 0.9868 - loss: 0.0341 - val_accuracy: 0.9858 - val_loss: 0.0353\n","Epoch 6/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 5ms/step - accuracy: 0.9865 - loss: 0.0364 - val_accuracy: 0.9844 - val_loss: 0.0388\n","Epoch 7/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 4ms/step - accuracy: 0.9859 - loss: 0.0355 - val_accuracy: 0.9874 - val_loss: 0.0321\n","Epoch 8/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 4ms/step - accuracy: 0.9858 - loss: 0.0366 - val_accuracy: 0.9878 - val_loss: 0.0335\n","Epoch 9/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 4ms/step - accuracy: 0.9862 - loss: 0.0346 - val_accuracy: 0.9858 - val_loss: 0.0364\n","Epoch 10/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 5ms/step - accuracy: 0.9863 - loss: 0.0346 - val_accuracy: 0.9858 - val_loss: 0.0342\n","Epoch 11/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 4ms/step - accuracy: 0.9855 - loss: 0.0372 - val_accuracy: 0.9856 - val_loss: 0.0370\n","Epoch 12/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 4ms/step - accuracy: 0.9867 - loss: 0.0341 - val_accuracy: 0.9877 - val_loss: 0.0333\n","Epoch 13/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 5ms/step - accuracy: 0.9872 - loss: 0.0344 - val_accuracy: 0.9873 - val_loss: 0.0328\n","Epoch 14/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 4ms/step - accuracy: 0.9866 - loss: 0.0362 - val_accuracy: 0.9876 - val_loss: 0.0336\n","Epoch 15/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 3ms/step - accuracy: 0.9860 - loss: 0.0346 - val_accuracy: 0.9844 - val_loss: 0.0356\n","Epoch 16/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 4ms/step - accuracy: 0.9873 - loss: 0.0323 - val_accuracy: 0.9857 - val_loss: 0.0348\n","Epoch 17/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 4ms/step - accuracy: 0.9870 - loss: 0.0341 - val_accuracy: 0.9872 - val_loss: 0.0300\n","Epoch 18/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 4ms/step - accuracy: 0.9870 - loss: 0.0324 - val_accuracy: 0.9845 - val_loss: 0.0409\n","Epoch 19/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 4ms/step - accuracy: 0.9860 - loss: 0.0353 - val_accuracy: 0.9861 - val_loss: 0.0335\n","Epoch 20/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 4ms/step - accuracy: 0.9866 - loss: 0.0340 - val_accuracy: 0.9866 - val_loss: 0.0329\n","Epoch 21/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 4ms/step - accuracy: 0.9869 - loss: 0.0337 - val_accuracy: 0.9883 - val_loss: 0.0325\n","Epoch 22/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 4ms/step - accuracy: 0.9859 - loss: 0.0360 - val_accuracy: 0.9851 - val_loss: 0.0369\n","Epoch 23/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 4ms/step - accuracy: 0.9874 - loss: 0.0334 - val_accuracy: 0.9873 - val_loss: 0.0322\n","Epoch 24/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 4ms/step - accuracy: 0.9870 - loss: 0.0329 - val_accuracy: 0.9861 - val_loss: 0.0344\n","Epoch 25/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 4ms/step - accuracy: 0.9880 - loss: 0.0312 - val_accuracy: 0.9873 - val_loss: 0.0317\n","Epoch 26/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 3ms/step - accuracy: 0.9869 - loss: 0.0339 - val_accuracy: 0.9849 - val_loss: 0.0418\n","Epoch 27/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 4ms/step - accuracy: 0.9880 - loss: 0.0320 - val_accuracy: 0.9836 - val_loss: 0.0405\n","Epoch 28/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m14s\u001b[0m 5ms/step - accuracy: 0.9875 - loss: 0.0328 - val_accuracy: 0.9897 - val_loss: 0.0278\n","Epoch 29/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 4ms/step - accuracy: 0.9874 - loss: 0.0324 - val_accuracy: 0.9874 - val_loss: 0.0302\n","Epoch 30/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 4ms/step - accuracy: 0.9879 - loss: 0.0317 - val_accuracy: 0.9900 - val_loss: 0.0274\n","Epoch 31/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 4ms/step - accuracy: 0.9881 - loss: 0.0315 - val_accuracy: 0.9890 - val_loss: 0.0264\n","Epoch 32/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 4ms/step - accuracy: 0.9871 - loss: 0.0327 - val_accuracy: 0.9875 - val_loss: 0.0320\n","Epoch 33/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 4ms/step - accuracy: 0.9872 - loss: 0.0324 - val_accuracy: 0.9880 - val_loss: 0.0308\n","Epoch 34/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 4ms/step - accuracy: 0.9882 - loss: 0.0303 - val_accuracy: 0.9896 - val_loss: 0.0265\n","Epoch 35/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 4ms/step - accuracy: 0.9881 - loss: 0.0303 - val_accuracy: 0.9871 - val_loss: 0.0334\n","Epoch 36/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 4ms/step - accuracy: 0.9885 - loss: 0.0303 - val_accuracy: 0.9875 - val_loss: 0.0336\n","Epoch 37/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 4ms/step - accuracy: 0.9878 - loss: 0.0318 - val_accuracy: 0.9858 - val_loss: 0.0389\n","Epoch 38/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 4ms/step - accuracy: 0.9889 - loss: 0.0293 - val_accuracy: 0.9879 - val_loss: 0.0344\n","Epoch 39/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 4ms/step - accuracy: 0.9881 - loss: 0.0313 - val_accuracy: 0.9872 - val_loss: 0.0319\n","Epoch 40/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 4ms/step - accuracy: 0.9872 - loss: 0.0327 - val_accuracy: 0.9853 - val_loss: 0.0388\n","Epoch 41/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 4ms/step - accuracy: 0.9883 - loss: 0.0295 - val_accuracy: 0.9882 - val_loss: 0.0325\n","Epoch 42/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 4ms/step - accuracy: 0.9889 - loss: 0.0291 - val_accuracy: 0.9874 - val_loss: 0.0322\n","Epoch 43/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 4ms/step - accuracy: 0.9886 - loss: 0.0297 - val_accuracy: 0.9844 - val_loss: 0.0406\n","Epoch 44/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 4ms/step - accuracy: 0.9873 - loss: 0.0316 - val_accuracy: 0.9889 - val_loss: 0.0315\n","Epoch 45/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 4ms/step - accuracy: 0.9886 - loss: 0.0300 - val_accuracy: 0.9873 - val_loss: 0.0358\n","Epoch 46/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 3ms/step - accuracy: 0.9872 - loss: 0.0322 - val_accuracy: 0.9884 - val_loss: 0.0277\n","Epoch 47/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 4ms/step - accuracy: 0.9888 - loss: 0.0289 - val_accuracy: 0.9868 - val_loss: 0.0363\n","Epoch 48/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 4ms/step - accuracy: 0.9892 - loss: 0.0288 - val_accuracy: 0.9881 - val_loss: 0.0305\n","Epoch 49/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 4ms/step - accuracy: 0.9884 - loss: 0.0309 - val_accuracy: 0.9884 - val_loss: 0.0285\n","Epoch 50/50\n","\u001b[1m2596/2596\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 4ms/step - accuracy: 0.9888 - loss: 0.0298 - val_accuracy: 0.9896 - val_loss: 0.0256\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.history.History at 0x7d532cb794f0>"]},"metadata":{},"execution_count":44}]},{"cell_type":"code","source":["import numpy as np\n","\n","y_pred_prob = model.predict(x_test_scaled)\n","y_pred = np.argmax(y_pred_prob, axis=1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HEL4ksULLyf9","executionInfo":{"status":"ok","timestamp":1757315919603,"user_tz":-480,"elapsed":1625,"user":{"displayName":"Muhammad Andi Ubaidillah","userId":"10941764502761508051"}},"outputId":"1b97fa42-cf0f-42c2-e92b-1769008de30b"},"execution_count":59,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m649/649\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score,classification_report\n","akurasi = accuracy_score(y_test, y_pred)\n","print(f\"Akurasi: {akurasi:.4f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WVvQy3_mMcIO","executionInfo":{"status":"ok","timestamp":1757316041214,"user_tz":-480,"elapsed":26,"user":{"displayName":"Muhammad Andi Ubaidillah","userId":"10941764502761508051"}},"outputId":"74764f9e-57b1-439e-e0e8-e36e44af0c1f"},"execution_count":61,"outputs":[{"output_type":"stream","name":"stdout","text":["Akurasi: 0.9896\n"]}]},{"cell_type":"code","source":["print(classification_report(y_test, y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Zr1eWtOEMyPr","executionInfo":{"status":"ok","timestamp":1757316083028,"user_tz":-480,"elapsed":118,"user":{"displayName":"Muhammad Andi Ubaidillah","userId":"10941764502761508051"}},"outputId":"11057e8d-ed33-4d59-cac1-a2bc407b868f"},"execution_count":62,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.99      0.99      0.99     12667\n","           1       0.98      0.99      0.99      8101\n","\n","    accuracy                           0.99     20768\n","   macro avg       0.99      0.99      0.99     20768\n","weighted avg       0.99      0.99      0.99     20768\n","\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","labels = ['Normal', 'DDoS']\n","cm = confusion_matrix(y_test, y_pred)\n","plt.figure(figsize=(6,5))\n","sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n","            xticklabels=labels,\n","            yticklabels=labels)\n","plt.xlabel('Predicted Label')\n","plt.ylabel('True Label')\n","plt.title('Confusion Matrix')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":487},"id":"Ht0XZ6_vr_Xg","executionInfo":{"status":"ok","timestamp":1757316114109,"user_tz":-480,"elapsed":408,"user":{"displayName":"Muhammad Andi Ubaidillah","userId":"10941764502761508051"}},"outputId":"74757127-6e9a-40e8-96d7-3bf76bbdaff4"},"execution_count":63,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x500 with 2 Axes>"],"image/png":"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\n"},"metadata":{}}]},{"cell_type":"code","source":["f1 = f1_score(y_test, y_pred, average=None)\n","\n","plt.figure(figsize=(6,4))\n","bars = plt.bar(labels, f1, color=['skyblue', 'salmon'])\n","plt.title('F1 Score per Class')\n","plt.ylim(0,1.05)\n","plt.ylabel('F1 Score')\n","\n","for bar in bars:\n","    height = bar.get_height()\n","    plt.annotate(f'{height:.2f}',\n","                 xy=(bar.get_x() + bar.get_width() / 2, height),\n","                 xytext=(0,3), textcoords='offset points', ha='center')\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":391},"id":"retvF3lcsUzU","executionInfo":{"status":"ok","timestamp":1757316117612,"user_tz":-480,"elapsed":181,"user":{"displayName":"Muhammad Andi Ubaidillah","userId":"10941764502761508051"}},"outputId":"a94cd4c3-20d5-4b62-86a8-1912ccf21a87"},"execution_count":64,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x400 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAhgAAAF2CAYAAAAskuGnAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAMIlJREFUeJzt3XtUVWX+x/EPoBxAbuYFkFDSyns4aBjiJRuU0kydSlJ/gWiat9JotCiF1BR1zPF+K81ydGWZl0ojDdNKmTRvlal511QQLQExAWH//mh5phOgYBuO6Pu11lnL/ezn2fu7nUE+PfvZ+zgYhmEIAADARI72LgAAANx6CBgAAMB0BAwAAGA6AgYAADAdAQMAAJiOgAEAAExHwAAAAKYjYAAAANMRMAAAgOkIGABgksDAQPXp08feZQA3BQIGUA4WL14sBweHIj8vv/yytd/69evVr18/NWnSRE5OTgoMDCzVeS5evKiEhAQ1adJEVapUUbVq1dSsWTMNGzZMp0+fNvmqbh+HDx/Ws88+q7p168rFxUWenp4KCwvT9OnT9dtvv9m7POCmVMneBQC3k7Fjx+quu+6yaWvSpIn1z8uWLdPy5csVHBysWrVqlerYeXl5atu2rfbv36/o6Gg999xzunjxovbu3atly5ape/fupT4mpLVr1+rJJ5+UxWJRVFSUmjRpotzcXH399dcaMWKE9u7dqwULFti7TOCmQ8AAytEjjzyiFi1aFLt/woQJevPNN1W5cmU9+uij+uGHH0p87NWrV2vXrl1aunSpevXqZbPv8uXLys3NveG6Sys7O1tVqlQpt/P9Fdeq9ejRo3rqqadUp04dbdy4UX5+ftZ9Q4YM0aFDh7R27dryKhWoULhFAtxEatWqpcqVK9/Q2MOHD0uSwsLCCu27Oq3/R/v371ePHj1Uo0YNubq6qn79+nr11Vdt+uzatUuPPPKIPD095e7urr///e/673//a9Pn6u2fzZs3a/DgwapZs6buvPNO6/5PP/1Ubdq0UZUqVeTh4aHOnTtr7969172eq8f98ssv9eyzz6patWry9PRUVFSUfv3110L9S3KePn36yN3dXYcPH1anTp3k4eGh3r17F1vD5MmTdfHiRS1cuNAmXFx19913a9iwYcWO/+WXX/TPf/5TTZs2lbu7uzw9PfXII49oz549hfrOnDlTjRs3lpubm6pWraoWLVpo2bJl1v1ZWVkaPny4AgMDZbFYVLNmTXXo0EE7d+4s9vyAPTGDAZSjjIwMnTt3zqatevXqphy7Tp06kqR3331Xo0aNkoODQ7F9v/vuO7Vp00aVK1fWgAEDFBgYqMOHD+vjjz/W+PHjJUl79+5VmzZt5OnpqZEjR6py5cqaP3++HnzwQW3evFktW7a0OebgwYNVo0YNxcfHKzs7W5K0ZMkSRUdHKyIiQpMmTdKlS5c0d+5ctW7dWrt27SrRGpOhQ4fK29tbr732mg4cOKC5c+fq+PHj2rRpk/UaS3OeK1euKCIiQq1bt9aUKVPk5uZW7Lk//vhj1a1bV61atbpunUU5cuSIVq9erSeffFJ33XWX0tLSNH/+fLVr104//vij9ZbVm2++qeeff15PPPGEhg0bpsuXL+u7777TN998Y52NGjhwoFasWKGhQ4eqUaNGOn/+vL7++mvt27dPwcHBN1QfUKYMAGXu7bffNiQV+SlO586djTp16pT4HJcuXTLq169vSDLq1Klj9OnTx1i4cKGRlpZWqG/btm0NDw8P4/jx4zbtBQUF1j9369bNcHZ2Ng4fPmxtO336tOHh4WG0bdu20LW1bt3auHLlirU9KyvL8Pb2Nvr3729zjtTUVMPLy6tQ+59dPW7z5s2N3Nxca/vkyZMNScaaNWtKfZ7o6GhDkvHyyy9f89yGYRgZGRmGJKNr167X7XtVnTp1jOjoaOv25cuXjfz8fJs+R48eNSwWizF27FhrW9euXY3GjRtf89heXl7GkCFDSlwLYG/cIgHK0ezZs7Vhwwabj1lcXV31zTffaMSIEZJ+v8XQr18/+fn56bnnnlNOTo4kKT09XV9++aX69u2r2rVr2xzj6oxAfn6+1q9fr27duqlu3brW/X5+furVq5e+/vprZWZm2ozt37+/nJycrNsbNmzQhQsX1LNnT507d876cXJyUsuWLfXFF1+U6LoGDBhgc9to0KBBqlSpktatW3fD5xk0aNB1z3v1+jw8PEpUZ1EsFoscHX//ZzY/P1/nz5+Xu7u76tevb3Nrw9vbWz///LO2b99e7LG8vb31zTff8DQQKgxukQDlKCQk5JqLPP8qLy8vTZ48WZMnT9bx48eVnJysKVOmaNasWfLy8tLrr7+uI0eOSLJ9euXP0tPTdenSJdWvX7/QvoYNG6qgoEAnT55U48aNre1/fjrm4MGDkqSHHnqoyHP8eU1Ice655x6bbXd3d/n5+enYsWM3dJ5KlSrZrBEpztVxWVlZJaqzKAUFBZo+fbrmzJmjo0ePKj8/37qvWrVq1j+/9NJL+vzzzxUSEqK7775bHTt2VK9evWzW00yePFnR0dEKCAhQ8+bN1alTJ0VFRdkEQOBmQsAAblF16tRR37591b17d9WtW1dLly7V66+/Xmbnc3V1tdkuKCiQ9Pv6CF9f30L9K1Uy55+f0p7nj7MK1+Lp6alatWqV6kmeP5swYYJGjx6tvn37aty4cbrjjjvk6Oio4cOHW+uWfg9tBw4c0CeffKKkpCR9+OGHmjNnjuLj4zVmzBhJUo8ePdSmTRutWrVK69ev17/+9S9NmjRJK1eu1COPPHLDNQJlhYAB3OKqVq2qevXqWX9RXv0v3mv94qxRo4bc3Nx04MCBQvv2798vR0dHBQQEXPO89erVkyTVrFlT4eHhN1q+Dh48qPbt21u3L168qDNnzqhTp06mnqcojz76qBYsWKCUlBSFhoaWevyKFSvUvn17LVy40Kb9woULhRb3VqlSRZGRkYqMjFRubq7+8Y9/aPz48YqLi5OLi4uk329RDR48WIMHD9bZs2cVHBys8ePHEzBwU2INBnCL2LNnT6EnVCTp+PHj+vHHH623O2rUqKG2bdtq0aJFOnHihE1fwzAkSU5OTurYsaPWrFljvRUhSWlpaVq2bJlat2593VscERER8vT01IQJE5SXl1dof3p6eomua8GCBTbj586dqytXrlh/qZp1nqKMHDlSVapU0TPPPKO0tLRC+w8fPqzp06cXO97Jycn6d3rVBx98oFOnTtm0nT9/3mbb2dlZjRo1kmEYysvLU35+vjIyMmz61KxZU7Vq1bKurQFuNsxgADeR7777Th999JEk6dChQ8rIyLDe1ggKClKXLl2KHbthwwYlJCToscce0wMPPCB3d3cdOXJEixYtUk5Ojl577TVr3xkzZqh169YKDg7WgAEDdNddd+nYsWNau3atdu/eLUl6/fXXtWHDBrVu3VqDBw9WpUqVNH/+fOXk5Gjy5MnXvRZPT0/NnTtXTz/9tIKDg/XUU0+pRo0aOnHihNauXauwsDDNmjXrusfJzc3V3//+d/Xo0UMHDhzQnDlz1Lp1az322GOmnqco9erV07JlyxQZGamGDRvavMlz69at+uCDD6753SOPPvqoxo4dq5iYGLVq1Urff/+9li5dWmjdRMeOHeXr66uwsDD5+Pho3759mjVrljp37iwPDw9duHBBd955p5544gkFBQXJ3d1dn3/+ubZv36433njjhq4NKHN2fooFuC1cfeRy+/btJepX1OePjz8W5ciRI0Z8fLzxwAMPGDVr1jQqVapk1KhRw+jcubOxcePGQv1/+OEHo3v37oa3t7fh4uJi1K9f3xg9erRNn507dxoRERGGu7u74ebmZrRv397YunVrqa7tiy++MCIiIgwvLy/DxcXFqFevntGnTx/j22+/LdHfxebNm40BAwYYVatWNdzd3Y3evXsb58+fv6HzREdHG1WqVLnmeYvy008/Gf379zcCAwMNZ2dnw8PDwwgLCzNmzpxpXL582dqvqMdUX3zxRcPPz89wdXU1wsLCjJSUFKNdu3ZGu3btrP3mz59vtG3b1qhWrZphsViMevXqGSNGjDAyMjIMwzCMnJwcY8SIEUZQUJDh4eFhVKlSxQgKCjLmzJlT6msByouDYfxp/g4AbgKLFy9WTEyMtm/fXqZP3gAoG6zBAAAApiNgAAAA0xEwAACA6ViDAQAATMcMBgAAMB0BAwAAmO62e9FWQUGBTp8+LQ8PD+s3RwIAgOszDENZWVmqVavWdb/T57YLGKdPn77udygAAIDinTx58rrfSnzbBQwPDw9Jv//llPTrogEAgJSZmamAgADr79Jrue0CxtXbIp6engQMAABuQEmWGLDIEzeV2bNnKzAwUC4uLmrZsqW2bdtWbN+8vDyNHTtW9erVk4uLi4KCgpSUlGTTJysrS8OHD1edOnXk6uqqVq1aafv27WV9GQBw2yNg4KaxfPlyxcbGKiEhQTt37lRQUJAiIiJ09uzZIvuPGjVK8+fP18yZM/Xjjz9q4MCB6t69u3bt2mXt88wzz2jDhg1asmSJvv/+e3Xs2FHh4eGFvi4bAGAyu37Vmh1kZGQYkqzfUoibR0hIiDFkyBDrdn5+vlGrVi0jMTGxyP5+fn7GrFmzbNr+8Y9/GL179zYMwzAuXbpkODk5GZ988olNn+DgYOPVV181uXrg9jJr1iyjTp06hsViMUJCQoxvvvmm2L65ubnGmDFjjLp16xoWi8W47777jE8//dSmT2ZmpjFs2DCjdu3ahouLixEaGmps27atrC8DpVSa36HMYOCmkJubqx07dig8PNza5ujoqPDwcKWkpBQ5JicnRy4uLjZtrq6u+vrrryVJV65cUX5+/jX7ACg9ZhtRIuUQeG4qzGDcnE6dOmVIMrZu3WrTPmLECCMkJKTIMT179jQaNWpk/PTTT0Z+fr6xfv16w9XV1XB2drb2CQ0NNdq1a2ecOnXKuHLlirFkyRLD0dHRuPfee8v0eoBbGbONty9mMHBbmD59uu655x41aNBAzs7OGjp0qGJiYmxe/rJkyRIZhiF/f39ZLBbNmDFDPXv2vO4LYgAUjdlGlBT/yuKmUL16dTk5OSktLc2mPS0tTb6+vkWOqVGjhlavXq3s7GwdP35c+/fvl7u7u+rWrWvtU69ePW3evFkXL17UyZMntW3bNuXl5dn0AVBy586dU35+vnx8fGzafXx8lJqaWuSYiIgITZ06VQcPHlRBQYE2bNiglStX6syZM5J+fz9RaGioxo0bp9OnTys/P1//+c9/lJKSYu2DiseuAePLL79Uly5dVKtWLTk4OGj16tXXHbNp0yYFBwfLYrHo7rvv1uLFi8u8TpQ9Z2dnNW/eXMnJyda2goICJScnKzQ09JpjXVxc5O/vrytXrujDDz9U165dC/WpUqWK/Pz89Ouvv+qzzz4rsg+AssFs4+3Jrv/LZWdnKygoSLNnzy5R/6NHj6pz585q3769du/ereHDh+uZZ57RZ599VsaVojzExsbqzTff1DvvvKN9+/Zp0KBBys7OVkxMjCQpKipKcXFx1v7ffPONVq5cqSNHjuirr77Sww8/rIKCAo0cOdLa57PPPlNSUpKOHj2qDRs2qH379mrQoIH1mABKh9lGlFiZrwgpIUnGqlWrrtln5MiRRuPGjW3aIiMjjYiIiBKfh0WeN7eZM2catWvXNpydnY2QkBDjv//9r3Vfu3btjOjoaOv2pk2bjIYNGxoWi8WoVq2a8fTTTxunTp2yOd7y5cuNunXrGs7Ozoavr68xZMgQ48KFC+V1OcAtKSQkxBg6dKh1Oz8/3/D39y92keef5ebmGvXq1TPi4uKK7fPLL78YXl5exvz58/9yvTBPaX6HOhiGYdg540j6/bWjq1atUrdu3Yrt07ZtWwUHB2vatGnWtrffflvDhw9XRkZGic6TmZkpLy8vZWRk8KpwALgBy5cvV3R0tObPn6+QkBBNmzZN77//vvbv3y8fHx9FRUXJ399fiYmJkn6fbTx16pSaNWumU6dO6bXXXtPRo0e1c+dOeXt7S/p9ttEwDNWvX1+HDh3SiBEj5OLioq+++kqVK1e249Xij0rzO7RCfRdJampqkQuLMjMz9dtvv8nV1bXQmJycHOXk5Fi3MzMzy7xOALiVRUZGKj09XfHx8UpNTVWzZs2UlJRk/ff5xIkTNmsnLl++rFGjRunIkSNyd3dXp06dtGTJEmu4kKSMjAzFxcXp559/1h133KHHH39c48ePJ1xUYBUqYNyIxMREjRkzxt5lAMAtZejQoRo6dGiR+zZt2mSz3a5dO/3444/XPF6PHj3Uo0cPs8rDTaBCLc/19fUtcmGRp6dnkbMXkhQXF6eMjAzr5+TJk+VRKgAAt7UKNYMRGhqqdevW2bRt2LDhmo8xWiwWWSyWsi5NE3edK/NzADeLl/9W3d4lALjJ2XUG4+LFi9q9e7d2794t6ffHUHfv3q0TJ05I+n32ISoqytp/4MCBOnLkiEaOHKn9+/drzpw5ev/99/XCCy/Yo3wAAFAMu85gfPvtt2rfvr11OzY2VpIUHR2txYsX68yZM9awIUl33XWX1q5dqxdeeEHTp0/XnXfeqbfeeksRERHlXjuAiilvzIv2LgEoN5UT3rDbue0aMB588EFd6ynZot7S+eCDD9p8Ax8AALj5VKhFngAAoGIgYAAAANMRMAAAgOkIGAAAwHQEDAAAYDoCBgAAMB0BAwAAmI6AAQAATEfAAAAApiNgAAAA0xEwAACA6QgYAADAdAQMAABgOgIGAAAwHQEDAACYjoABAABMR8AAAACmI2AAAADTETAAAIDpCBgAAMB0BAwAAGA6AgYAADAdAQMAAJiOgAEAAExHwAAAAKYjYAAAANMRMAAAgOkIGAAAwHQEDAAAYDoCBgAAMB0BAwAAmI6AAQAATEfAAAAApiNgAAAA0xEwAACA6QgYAADAdAQMAABgOgIGAAAwHQEDAACYjoABAABMR8AAAACmI2AAAADTETAAAIDpCBgAAMB0BAwAAGA6AgYAADAdAQMAAJiOgAEAAExn94Axe/ZsBQYGysXFRS1bttS2bduu2X/atGmqX7++XF1dFRAQoBdeeEGXL18up2oBAEBJ2DVgLF++XLGxsUpISNDOnTsVFBSkiIgInT17tsj+y5Yt08svv6yEhATt27dPCxcu1PLly/XKK6+Uc+UAAOBa7Bowpk6dqv79+ysmJkaNGjXSvHnz5ObmpkWLFhXZf+vWrQoLC1OvXr0UGBiojh07qmfPnted9QAAAOXLbgEjNzdXO3bsUHh4+P+KcXRUeHi4UlJSihzTqlUr7dixwxoojhw5onXr1qlTp07lUjMAACiZSvY68blz55Sfny8fHx+bdh8fH+3fv7/IMb169dK5c+fUunVrGYahK1euaODAgde8RZKTk6OcnBzrdmZmpjkXAAAAimX3RZ6lsWnTJk2YMEFz5szRzp07tXLlSq1du1bjxo0rdkxiYqK8vLysn4CAgHKsGACA25PdZjCqV68uJycnpaWl2bSnpaXJ19e3yDGjR4/W008/rWeeeUaS1LRpU2VnZ2vAgAF69dVX5ehYOC/FxcUpNjbWup2ZmUnIAACgjNltBsPZ2VnNmzdXcnKyta2goEDJyckKDQ0tcsylS5cKhQgnJydJkmEYRY6xWCzy9PS0+QAAgLJltxkMSYqNjVV0dLRatGihkJAQTZs2TdnZ2YqJiZEkRUVFyd/fX4mJiZKkLl26aOrUqfrb3/6mli1b6tChQxo9erS6dOliDRoAAMD+7BowIiMjlZ6ervj4eKWmpqpZs2ZKSkqyLvw8ceKEzYzFqFGj5ODgoFGjRunUqVOqUaOGunTpovHjx9vrEgAAQBEcjOLuLdyiMjMz5eXlpYyMDFNvl0zcdc60YwE3u5f/Vt3eJdywvDEv2rsEoNxUTnjD1OOV5ndohXqKBAAAVAwEDAAAYDoCBgAAMB0BAwAAmI6AAQAATEfAAAAApiNgAAAA0xEwAACA6QgYAADAdAQMAABgOgIGAAAwHQEDAACYjoABAABMR8AAAACmI2AAAADTETAAAIDpCBgAAMB0BAwAAGA6AgYAADAdAQMAAJiOgAEAAExHwAAAAKYjYAAAANMRMAAAgOkIGAAAwHQEDAAAYDoCBgAAMB0BAwAAmI6AAQAATEfAAAAApiNgAAAA0xEwAACA6QgYAADAdAQMAABgOgIGAAAwHQEDAACYjoABAABMR8AAAACmI2AAAADTETAAAIDpCBgAAMB0BAwAAGA6AgYAADAdAQMAAJiOgAEAAEx3QwHjypUr+vzzzzV//nxlZWVJkk6fPq2LFy+aWhwAAKiYKpV2wPHjx/Xwww/rxIkTysnJUYcOHeTh4aFJkyYpJydH8+bNK4s6AQBABVLqGYxhw4apRYsW+vXXX+Xq6mpt7969u5KTk00tDgAAVEylDhhfffWVRo0aJWdnZ5v2wMBAnTp1qtQFzJ49W4GBgXJxcVHLli21bdu2a/a/cOGChgwZIj8/P1ksFt17771at25dqc8LAADKTqlvkRQUFCg/P79Q+88//ywPD49SHWv58uWKjY3VvHnz1LJlS02bNk0RERE6cOCAatasWah/bm6uOnTooJo1a2rFihXy9/fX8ePH5e3tXdrLAAAAZajUMxgdO3bUtGnTrNsODg66ePGiEhIS1KlTp1Ida+rUqerfv79iYmLUqFEjzZs3T25ublq0aFGR/RctWqRffvlFq1evVlhYmAIDA9WuXTsFBQWV9jIAAEAZKnXAmDJlirZs2aJGjRrp8uXL6tWrl/X2yKRJk0p8nNzcXO3YsUPh4eH/K8bRUeHh4UpJSSlyzEcffaTQ0FANGTJEPj4+atKkiSZMmFDkjMpVOTk5yszMtPkAAICyVepbJAEBAdqzZ4+WL1+uPXv26OLFi+rXr5969+5ts+jzes6dO6f8/Hz5+PjYtPv4+Gj//v1Fjjly5Ig2btyo3r17a926dTp06JAGDx6svLw8JSQkFDkmMTFRY8aMKfkFAgCAv6xUASMvL08NGjTQJ598ot69e6t3795lVVeRCgoKVLNmTS1YsEBOTk5q3ry5Tp06pX/961/FBoy4uDjFxsZatzMzMxUQEFBeJQMAcFsqVcCoXLmyLl++bMqJq1evLicnJ6Wlpdm0p6WlydfXt8gxfn5+qly5spycnKxtDRs2VGpqqnJzcws92SJJFotFFovFlJoBAEDJlHoNxpAhQzRp0iRduXLlL53Y2dlZzZs3t3l3RkFBgZKTkxUaGlrkmLCwMB06dEgFBQXWtp9++kl+fn5FhgsAAGAfpV6DsX37diUnJ2v9+vVq2rSpqlSpYrN/5cqVJT5WbGysoqOj1aJFC4WEhGjatGnKzs5WTEyMJCkqKkr+/v5KTEyUJA0aNEizZs3SsGHD9Nxzz+ngwYOaMGGCnn/++dJeBgAAKEOlDhje3t56/PHHTTl5ZGSk0tPTFR8fr9TUVDVr1kxJSUnWhZ8nTpyQo+P/JlkCAgL02Wef6YUXXtB9990nf39/DRs2TC+99JIp9QAAAHM4GIZh2LuI8pSZmSkvLy9lZGTI09PTtONO3HXOtGMBN7uX/1bd3iXcsLwxL9q7BKDcVE54w9TjleZ3aKlnMK5KT0/XgQMHJEn169dXjRo1bvRQAADgFlPqRZ7Z2dnq27ev/Pz81LZtW7Vt21a1atVSv379dOnSpbKoEQAAVDClDhixsbHavHmzPv74Y124cEEXLlzQmjVrtHnzZr34IlOPAADgBm6RfPjhh1qxYoUefPBBa1unTp3k6uqqHj16aO7cuWbWBwAAKqBSz2BcunSp0Ou9JalmzZrcIgEAAJJuIGCEhoYqISHB5o2ev/32m8aMGVPsC7IAAMDtpdS3SKZPn66IiAjdeeed1q9J37Nnj1xcXPTZZ5+ZXiAAAKh4Sh0wmjRpooMHD2rp0qXWbz3t2bNnqb9NFQAA3Lpu6D0Ybm5u6t+/v9m1AACAW0Sp12AkJiZq0aJFhdoXLVqkSZMmmVIUAACo2EodMObPn68GDRoUam/cuLHmzZtnSlEAAKBiK3XASE1NlZ+fX6H2GjVq6MyZM6YUBQAAKrZSB4yAgABt2bKlUPuWLVtUq1YtU4oCAAAVW6kXefbv31/Dhw9XXl6eHnroIUlScnKyRo4cyavCAQCApBsIGCNGjND58+c1ePBg5ebmSpJcXFz00ksvKS4uzvQCAQBAxVPqgOHg4KBJkyZp9OjR2rdvn1xdXXXPPffIYrGURX0AAKACKvUajKvc3d11//33y8PDQ4cPH1ZBQYGZdQEAgAqsxAFj0aJFmjp1qk3bgAEDVLduXTVt2lRNmjTRyZMnTS8QAABUPCUOGAsWLFDVqlWt20lJSXr77bf17rvvavv27fL29taYMWPKpEgAAFCxlHgNxsGDB9WiRQvr9po1a9S1a1f17t1bkjRhwgTFxMSYXyEAAKhwSjyD8dtvv8nT09O6vXXrVrVt29a6XbduXaWmpppbHQAAqJBKHDDq1KmjHTt2SJLOnTunvXv3KiwszLo/NTVVXl5e5lcIAAAqnBLfIomOjtaQIUO0d+9ebdy4UQ0aNFDz5s2t+7du3aomTZqUSZEAAKBiKXHAGDlypC5duqSVK1fK19dXH3zwgc3+LVu2qGfPnqYXCAAAKp4SBwxHR0eNHTtWY8eOLXL/nwMHAAC4fd3wi7YAAACKQ8AAAACmI2AAAADTETAAAIDpCBgAAMB0pgWMkydPqm/fvmYdDgAAVGCmBYxffvlF77zzjlmHAwAAFViJ34Px0UcfXXP/kSNH/nIxAADg1lDigNGtWzc5ODjIMIxi+zg4OJhSFAAAqNhKfIvEz89PK1euVEFBQZGfnTt3lmWdAACgAilxwGjevLn121SLcr3ZDQAAcPso8S2SESNGKDs7u9j9d999t7744gtTigIAABVbiQNGmzZtrrm/SpUqateu3V8uCAAAVHwlvkVy5MgRboEAAIASKXHAuOeee5Senm7djoyMVFpaWpkUBQAAKrYSB4w/z16sW7fummsyAADA7YvvIgEAAKYrccBwcHAo9CItXqwFAACKUuKnSAzDUJ8+fWSxWCRJly9f1sCBA1WlShWbfitXrjS3QgAAUOGUOGBER0fbbP/f//2f6cUAAIBbQ4kDxttvv12WdQAAgFsIizwBAIDpboqAMXv2bAUGBsrFxUUtW7bUtm3bSjTuvffek4ODg7p161a2BQIAgFKxe8BYvny5YmNjlZCQoJ07dyooKEgRERE6e/bsNccdO3ZM//znP6/7CnMAAFD+7B4wpk6dqv79+ysmJkaNGjXSvHnz5ObmpkWLFhU7Jj8/X71799aYMWNUt27dcqwWAACUhF0DRm5urnbs2KHw8HBrm6Ojo8LDw5WSklLsuLFjx6pmzZrq169feZQJAABKqcRPkZSFc+fOKT8/Xz4+PjbtPj4+2r9/f5Fjvv76ay1cuFC7d+8u0TlycnKUk5Nj3c7MzLzhegEAQMnY/RZJaWRlZenpp5/Wm2++qerVq5doTGJiory8vKyfgICAMq4SAADYdQajevXqcnJyKvStrGlpafL19S3U//Dhwzp27Ji6dOlibSsoKJAkVapUSQcOHFC9evVsxsTFxSk2Nta6nZmZScgAAKCM2TVgODs7q3nz5kpOTrY+alpQUKDk5GQNHTq0UP8GDRro+++/t2kbNWqUsrKyNH369CKDg8Visb7eHAAAlA+7BgxJio2NVXR0tFq0aKGQkBBNmzZN2dnZiomJkSRFRUXJ399fiYmJcnFxUZMmTWzGe3t7S1KhdgAAYD92DxiRkZFKT09XfHy8UlNT1axZMyUlJVkXfp44cUKOjhVqqQgAALc9uwcMSRo6dGiRt0QkadOmTdccu3jxYvMLAgAAfwlTAwAAwHQEDAAAYDoCBgAAMB0BAwAAmI6AAQAATEfAAAAApiNgAAAA0xEwAACA6QgYAADAdAQMAABgOgIGAAAwHQEDAACYjoABAABMR8AAAACmI2AAAADTETAAAIDpCBgAAMB0BAwAAGA6AgYAADAdAQMAAJiOgAEAAExHwAAAAKYjYAAAANMRMAAAgOkIGAAAwHQEDAAAYDoCBgAAMB0BAwAAmI6AAQAATEfAAAAApiNgAAAA0xEwAACA6QgYAADAdAQMAABgOgIGAAAwHQEDAACYjoABAABMR8AAAACmI2AAAADTETAAAIDpCBgAAMB0BAwAAGA6AgYAADAdAQMAAJiOgAEAAExHwAAAAKYjYAAAANMRMAAAgOluioAxe/ZsBQYGysXFRS1bttS2bduK7fvmm2+qTZs2qlq1qqpWrarw8PBr9gcAAOXP7gFj+fLlio2NVUJCgnbu3KmgoCBFRETo7NmzRfbftGmTevbsqS+++EIpKSkKCAhQx44dderUqXKuHAAAFMfuAWPq1Knq37+/YmJi1KhRI82bN09ubm5atGhRkf2XLl2qwYMHq1mzZmrQoIHeeustFRQUKDk5uZwrBwAAxbFrwMjNzdWOHTsUHh5ubXN0dFR4eLhSUlJKdIxLly4pLy9Pd9xxR1mVCQAASqmSPU9+7tw55efny8fHx6bdx8dH+/fvL9ExXnrpJdWqVcsmpPxRTk6OcnJyrNuZmZk3XjAAACgRu98i+SsmTpyo9957T6tWrZKLi0uRfRITE+Xl5WX9BAQElHOVAADcfuwaMKpXry4nJyelpaXZtKelpcnX1/eaY6dMmaKJEydq/fr1uu+++4rtFxcXp4yMDOvn5MmTptQOAACKZ9eA4ezsrObNm9ss0Ly6YDM0NLTYcZMnT9a4ceOUlJSkFi1aXPMcFotFnp6eNh8AAFC27LoGQ5JiY2MVHR2tFi1aKCQkRNOmTVN2drZiYmIkSVFRUfL391diYqIkadKkSYqPj9eyZcsUGBio1NRUSZK7u7vc3d3tdh0AAOB/7B4wIiMjlZ6ervj4eKWmpqpZs2ZKSkqyLvw8ceKEHB3/N9Eyd+5c5ebm6oknnrA5TkJCgl577bXyLB0AABTD7gFDkoYOHaqhQ4cWuW/Tpk0228eOHSv7ggAAwF9SoZ8iAQAANycCBgAAMB0BAwAAmI6AAQAATEfAAAAApiNgAAAA0xEwAACA6QgYAADAdAQMAABgOgIGAAAwHQEDAACYjoABAABMR8AAAACmI2AAAADTETAAAIDpCBgAAMB0BAwAAGA6AgYAADAdAQMAAJiOgAEAAExHwAAAAKYjYAAAANMRMAAAgOkIGAAAwHQEDAAAYDoCBgAAMB0BAwAAmI6AAQAATEfAAAAApiNgAAAA0xEwAACA6QgYAADAdAQMAABgOgIGAAAwHQEDAACYjoABAABMR8AAAACmI2AAAADTETAAAIDpCBgAAMB0BAwAAGA6AgYAADAdAQMAAJiOgAEAAExHwAAAAKYjYAAAANMRMAAAgOkIGAAAwHQ3RcCYPXu2AgMD5eLiopYtW2rbtm3X7P/BBx+oQYMGcnFxUdOmTbVu3bpyqhQAAJSE3QPG8uXLFRsbq4SEBO3cuVNBQUGKiIjQ2bNni+y/detW9ezZU/369dOuXbvUrVs3devWTT/88EM5Vw4AAIpj94AxdepU9e/fXzExMWrUqJHmzZsnNzc3LVq0qMj+06dP18MPP6wRI0aoYcOGGjdunIKDgzVr1qxyrhwAABSnkj1Pnpubqx07diguLs7a5ujoqPDwcKWkpBQ5JiUlRbGxsTZtERERWr16dZH9c3JylJOTY93OyMiQJGVmZv7F6m1dvphl6vGAm1lmprO9S7hheZdzrt8JuEVUNvl33dXfnYZhXLevXQPGuXPnlJ+fLx8fH5t2Hx8f7d+/v8gxqampRfZPTU0tsn9iYqLGjBlTqD0gIOAGqwZQ+CcKwE1p4uwyOWxWVpa8vLyu2ceuAaM8xMXF2cx4FBQU6JdfflG1atXk4OBgx8rwV2VmZiogIEAnT56Up6envcsBUAx+Vm8dhmEoKytLtWrVum5fuwaM6tWry8nJSWlpaTbtaWlp8vX1LXKMr69vqfpbLBZZLBabNm9v7xsvGjcdT09P/tECKgB+Vm8N15u5uMquizydnZ3VvHlzJScnW9sKCgqUnJys0NDQIseEhoba9JekDRs2FNsfAACUP7vfIomNjVV0dLRatGihkJAQTZs2TdnZ2YqJiZEkRUVFyd/fX4mJiZKkYcOGqV27dnrjjTfUuXNnvffee/r222+1YMECe14GAAD4A7sHjMjISKWnpys+Pl6pqalq1qyZkpKSrAs5T5w4IUfH/020tGrVSsuWLdOoUaP0yiuv6J577tHq1avVpEkTe10C7MRisSghIaHQLTAANxd+Vm9PDkZJnjUBAAAoBbu/aAsAANx6CBgAAMB0BAwAAGA6AgZQhE2bNsnBwUEXLlywdykAUCERMFDm+vTpIwcHB02cONGmffXq1bxNFbjJXf35dXBwUOXKleXj46MOHTpo0aJFKigosPYLDAy09nN1dVVgYKB69OihjRs3lvqc6enpGjRokGrXri2LxSJfX19FRERoy5YtZl4ayhgBA+XCxcVFkyZN0q+//mraMXNzc007FoDiPfzwwzpz5oyOHTumTz/9VO3bt9ewYcP06KOP6sqVK9Z+Y8eO1ZkzZ3TgwAG9++678vb2Vnh4uMaPH1+q8z3++OPatWuX3nnnHf3000/66KOP9OCDD+r8+fNmXxrKEAED5SI8PFy+vr7WF6YV5cMPP1Tjxo1lsVgUGBioN954w2Z/YGCgxo0bp6ioKHl6emrAgAFavHixvL299cknn6h+/fpyc3PTE088oUuXLumdd95RYGCgqlatqueff175+fnWYy1ZskQtWrSQh4eHfH191atXL509e7bMrh+oyK7OIvj7+ys4OFivvPKK1qxZo08//VSLFy+29rv681S7dm21bdtWCxYs0OjRoxUfH68DBw5Y+23evFkhISGyWCzy8/PTyy+/bA0qFy5c0FdffaVJkyapffv2qlOnjkJCQhQXF6fHHnusvC8dfwEBA+XCyclJEyZM0MyZM/Xzzz8X2r9jxw716NFDTz31lL7//nu99tprGj16tM0/XpI0ZcoUBQUFadeuXRo9erQk6dKlS5oxY4bee+89JSUladOmTerevbvWrVundevWacmSJZo/f75WrFhhPU5eXp7GjRunPXv2aPXq1Tp27Jj69OlTln8FwC3loYceUlBQkFauXHnNfsOGDZNhGFqzZo0k6dSpU+rUqZPuv/9+7dmzR3PnztXChQv1+uuvS5Lc3d3l7u6u1atXKycnp8yvA2XIAMpYdHS00bVrV8MwDOOBBx4w+vbtaxiGYaxatcq4+n/BXr16GR06dLAZN2LECKNRo0bW7Tp16hjdunWz6fP2228bkoxDhw5Z25599lnDzc3NyMrKsrZFREQYzz77bLE1bt++3ZBkHfPFF18Ykoxff/219BcM3EL++PP7Z5GRkUbDhg0Nw/j95/Pf//53kf18fHyMQYMGGYZhGK+88opRv359o6CgwLp/9uzZhru7u5Gfn28YhmGsWLHCqFq1quHi4mK0atXKiIuLM/bs2WPeRaFcMIOBcjVp0iS988472rdvn037vn37FBYWZtMWFhamgwcP2tzaaNGiRaFjurm5qV69etZtHx8fBQYGyt3d3abtj7dAduzYoS5duqh27dry8PBQu3btJP3+anoAJWMYRokWav+x3759+xQaGmozLiwsTBcvXrTObj7++OM6ffq0PvroIz388MPatGmTgoODC81o4uZGwEC5atu2rSIiIhQXF3dD46tUqVKorXLlyjbbV1e7/7nt6or37OxsRUREyNPTU0uXLtX27du1atUqSSwcBUpj3759uuuuu67Z5/z580pPT79uvz9zcXFRhw4dNHr0aG3dulV9+vRRQkLCXykX5YyAgXI3ceJEffzxx0pJSbG2NWzYsNAjaFu2bNG9994rJycnU8+/f/9+nT9/XhMnTlSbNm3UoEEDFngCpbRx40Z9//33evzxx6/Zb/r06XJ0dFS3bt0k/f6znpKSIuMPX4O1ZcsWeXh46M477yz2OI0aNVJ2drYptaN82P3bVHH7adq0qXr37q0ZM2ZY21588UXdf//9GjdunCIjI5WSkqJZs2Zpzpw5pp+/du3acnZ21syZMzVw4ED98MMPGjdunOnnAW4VOTk5Sk1NVX5+vtLS0pSUlKTExEQ9+uijioqKsvbLyspSamqq8vLydPToUf3nP//RW2+9pcTERN19992SpMGDB2vatGl67rnnNHToUB04cEAJCQmKjY2Vo6Ojzp8/ryeffFJ9+/bVfffdJw8PD3377beaPHmyunbtaq+/AtwAAgbsYuzYsVq+fLl1Ozg4WO+//77i4+M1btw4+fn5aezYsWXyZEeNGjW0ePFivfLKK5oxY4aCg4M1ZcoUHoEDipGUlCQ/Pz9VqlRJVatWVVBQkGbMmKHo6Gg5Ov5vIjw+Pl7x8fFydnaWr6+vHnjgASUnJ6t9+/bWPv7+/lq3bp1GjBihoKAg3XHHHerXr59GjRol6fenSFq2bKl///vfOnz4sPLy8hQQEKD+/fvrlVdeKfdrx43j69oBAIDpWIMBAABMR8AAAACmI2AAAADTETAAAIDpCBgAAMB0BAwAAGA6AgYAADAdAQMAAJiOgAEAAExHwAAAAKYjYAAAANMRMAAAgOn+H5WMDQ7O9VjgAAAAAElFTkSuQmCC\n"},"metadata":{}}]}]}