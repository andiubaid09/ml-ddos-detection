{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPTahuG8Dz0Ek5j66G3MAIp"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"80tXY3uqcQ9O","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1760087107076,"user_tz":-480,"elapsed":4211,"user":{"displayName":"Muhammad Andi Ubaidillah","userId":"10941764502761508051"}},"outputId":"ccdc507f-9337-4a11-faa2-458eb6829415"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["import pandas as pd\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","datasheet = '/content/drive/My Drive/Datasheet/DDoS/dataset_sdn.csv'\n","\n","df = pd.read_csv(datasheet)"]},{"cell_type":"code","source":["print(\"Jumlah Missing Values\")\n","print(df.isnull().sum())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"teA6Shnwebwx","executionInfo":{"status":"ok","timestamp":1760087108694,"user_tz":-480,"elapsed":48,"user":{"displayName":"Muhammad Andi Ubaidillah","userId":"10941764502761508051"}},"outputId":"21647452-a71f-44f4-c964-d7a16c1b6f30"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Jumlah Missing Values\n","dt               0\n","switch           0\n","src              0\n","dst              0\n","pktcount         0\n","bytecount        0\n","dur              0\n","dur_nsec         0\n","tot_dur          0\n","flows            0\n","packetins        0\n","pktperflow       0\n","byteperflow      0\n","pktrate          0\n","Pairflow         0\n","Protocol         0\n","port_no          0\n","tx_bytes         0\n","rx_bytes         0\n","tx_kbps          0\n","rx_kbps        506\n","tot_kbps       506\n","label            0\n","dtype: int64\n"]}]},{"cell_type":"markdown","source":["**PREPROCESSING**"],"metadata":{"id":"zQ64BfoqI3rL"}},{"cell_type":"code","source":["df = df.dropna(subset=['rx_kbps','tot_kbps'])\n","df['label'] = df['label'].astype(int)\n","\n","df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lOcaVwM7elhx","executionInfo":{"status":"ok","timestamp":1760087114826,"user_tz":-480,"elapsed":70,"user":{"displayName":"Muhammad Andi Ubaidillah","userId":"10941764502761508051"}},"outputId":"c692cfba-1138-4e01-b8da-4a79b8305702"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Index: 103839 entries, 0 to 104344\n","Data columns (total 23 columns):\n"," #   Column       Non-Null Count   Dtype  \n","---  ------       --------------   -----  \n"," 0   dt           103839 non-null  int64  \n"," 1   switch       103839 non-null  int64  \n"," 2   src          103839 non-null  object \n"," 3   dst          103839 non-null  object \n"," 4   pktcount     103839 non-null  int64  \n"," 5   bytecount    103839 non-null  int64  \n"," 6   dur          103839 non-null  int64  \n"," 7   dur_nsec     103839 non-null  int64  \n"," 8   tot_dur      103839 non-null  float64\n"," 9   flows        103839 non-null  int64  \n"," 10  packetins    103839 non-null  int64  \n"," 11  pktperflow   103839 non-null  int64  \n"," 12  byteperflow  103839 non-null  int64  \n"," 13  pktrate      103839 non-null  int64  \n"," 14  Pairflow     103839 non-null  int64  \n"," 15  Protocol     103839 non-null  object \n"," 16  port_no      103839 non-null  int64  \n"," 17  tx_bytes     103839 non-null  int64  \n"," 18  rx_bytes     103839 non-null  int64  \n"," 19  tx_kbps      103839 non-null  int64  \n"," 20  rx_kbps      103839 non-null  float64\n"," 21  tot_kbps     103839 non-null  float64\n"," 22  label        103839 non-null  int64  \n","dtypes: float64(3), int64(17), object(3)\n","memory usage: 19.0+ MB\n"]}]},{"cell_type":"code","source":["Features = [\n","    'dt','dur','dur_nsec','tot_dur','pktrate','Protocol','port_no','tx_kbps','rx_kbps','tot_kbps'\n","]\n","df_fitur = df[Features]"],"metadata":{"id":"cBisoUKBJDfM","executionInfo":{"status":"ok","timestamp":1760087117040,"user_tz":-480,"elapsed":5,"user":{"displayName":"Muhammad Andi Ubaidillah","userId":"10941764502761508051"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","\n","X = df_fitur\n","y = df['label']"],"metadata":{"id":"JLvUwEzWfK0D","executionInfo":{"status":"ok","timestamp":1760087131350,"user_tz":-480,"elapsed":922,"user":{"displayName":"Muhammad Andi Ubaidillah","userId":"10941764502761508051"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["X_train, X_test, y_train, y_test = train_test_split(\n","    X, y, test_size = 0.2, random_state=42, stratify=y\n",")"],"metadata":{"id":"yWJVlkGBfO6L","executionInfo":{"status":"ok","timestamp":1760087132726,"user_tz":-480,"elapsed":76,"user":{"displayName":"Muhammad Andi Ubaidillah","userId":"10941764502761508051"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["X_train, X_val, y_train, y_val = train_test_split(\n","    X_train,y_train, test_size = 0.2, random_state=42, stratify=y_train\n",")"],"metadata":{"id":"8-NAUY9GWbyU","executionInfo":{"status":"ok","timestamp":1760087273396,"user_tz":-480,"elapsed":99,"user":{"displayName":"Muhammad Andi Ubaidillah","userId":"10941764502761508051"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["numeric_features = ['dt','dur','dur_nsec','tot_dur','pktrate','port_no','tx_kbps','rx_kbps','tot_kbps']\n","categorial_features = ['Protocol']"],"metadata":{"id":"aC0jRHK4KEkU","executionInfo":{"status":"ok","timestamp":1760087278530,"user_tz":-480,"elapsed":7,"user":{"displayName":"Muhammad Andi Ubaidillah","userId":"10941764502761508051"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler, OneHotEncoder\n","\n","scaler = StandardScaler()\n","num_feat = numeric_features\n","num_tranform = scaler"],"metadata":{"id":"j0_uhio9fjMe","executionInfo":{"status":"ok","timestamp":1760087279689,"user_tz":-480,"elapsed":3,"user":{"displayName":"Muhammad Andi Ubaidillah","userId":"10941764502761508051"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["encoder = OneHotEncoder(handle_unknown='ignore', sparse_output=False)\n","cat_feat = categorial_features\n","cat_transform = encoder"],"metadata":{"id":"lRAXueLxKXI1","executionInfo":{"status":"ok","timestamp":1760087281094,"user_tz":-480,"elapsed":53,"user":{"displayName":"Muhammad Andi Ubaidillah","userId":"10941764502761508051"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["from sklearn.compose import ColumnTransformer\n","\n","preprocessor = ColumnTransformer(\n","    transformers=[\n","        ('cat', cat_transform, cat_feat),\n","        ('num', num_tranform, num_feat)\n","    ],\n","    remainder = 'drop'\n",")"],"metadata":{"id":"cuZJBhbVKmK3","executionInfo":{"status":"ok","timestamp":1760087283453,"user_tz":-480,"elapsed":42,"user":{"displayName":"Muhammad Andi Ubaidillah","userId":"10941764502761508051"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["X_train_prep = preprocessor.fit_transform(X_train)\n","X_test_prep = preprocessor.fit_transform(X_test)\n","X_val_prep = preprocessor.fit_transform(X_val)"],"metadata":{"id":"OyF8UNa8MC_x","executionInfo":{"status":"ok","timestamp":1760087374429,"user_tz":-480,"elapsed":243,"user":{"displayName":"Muhammad Andi Ubaidillah","userId":"10941764502761508051"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["input_dim = X_train_prep.shape[1]"],"metadata":{"id":"G7_BAl0XREEa","executionInfo":{"status":"ok","timestamp":1760087377177,"user_tz":-480,"elapsed":29,"user":{"displayName":"Muhammad Andi Ubaidillah","userId":"10941764502761508051"}}},"execution_count":18,"outputs":[]},{"cell_type":"markdown","source":["**BUILD MODEL**"],"metadata":{"id":"QmtqG7NuRu0Z"}},{"cell_type":"code","source":["import numpy as np\n","import tensorflow as tf\n","from tensorflow import keras\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Dropout\n","from tensorflow.keras import layers\n","\n","num_classes = len(np.unique(y_train))\n","model = keras.Sequential([\n","    #Layer 1\n","    layers.Dense(units=112, activation='relu', input_shape=(input_dim,)),\n","    layers.BatchNormalization(),\n","    layers.Dropout(0.0), #No Dropout\n","\n","    #Layer 2\n","    layers.Dense(units=128, activation='relu'),\n","    layers.BatchNormalization(),\n","    layers.Dropout(0.1),\n","\n","    #Layer 3\n","    layers.Dense(units=64, activation='tanh'),\n","    layers.BatchNormalization(),\n","    layers.Dropout(0.0),\n","\n","    #Output Layers\n","    layers.Dense(units=num_classes, activation='softmax')\n","])\n","\n","learning_rate = 0.0009739768003064985\n","\n","model.compile(\n","    optimizer=keras.optimizers.Adam(learning_rate=learning_rate),\n","    loss='sparse_categorical_crossentropy',\n","    metrics=['accuracy']\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JeAa1fNdgMiD","executionInfo":{"status":"ok","timestamp":1760087379159,"user_tz":-480,"elapsed":55,"user":{"displayName":"Muhammad Andi Ubaidillah","userId":"10941764502761508051"}},"outputId":"e0e3d98a-75b8-401c-933e-0f729699613c"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.12/dist-packages/keras/src/layers/core/dense.py:93: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]}]},{"cell_type":"markdown","source":["**TRAINING MODEL**"],"metadata":{"id":"hZ3Vas9-Tqc4"}},{"cell_type":"code","source":["history = model.fit(\n","    X_train_prep, y_train,\n","    validation_split = 0.2,\n","    epochs = 50,\n","    validation_data = (X_val_prep, y_val),\n","    verbose = 1\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zIMsDRyZyg_3","executionInfo":{"status":"ok","timestamp":1760087809165,"user_tz":-480,"elapsed":416472,"user":{"displayName":"Muhammad Andi Ubaidillah","userId":"10941764502761508051"}},"outputId":"ee131750-3246-4074-d834-aa045617dd85"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 4ms/step - accuracy: 0.8501 - loss: 0.3345 - val_accuracy: 0.9274 - val_loss: 0.1689\n","Epoch 2/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 3ms/step - accuracy: 0.9172 - loss: 0.1920 - val_accuracy: 0.9290 - val_loss: 0.1564\n","Epoch 3/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 4ms/step - accuracy: 0.9281 - loss: 0.1687 - val_accuracy: 0.9376 - val_loss: 0.1403\n","Epoch 4/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 3ms/step - accuracy: 0.9317 - loss: 0.1602 - val_accuracy: 0.9425 - val_loss: 0.1319\n","Epoch 5/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 4ms/step - accuracy: 0.9370 - loss: 0.1498 - val_accuracy: 0.9422 - val_loss: 0.1352\n","Epoch 6/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 4ms/step - accuracy: 0.9419 - loss: 0.1403 - val_accuracy: 0.9494 - val_loss: 0.1171\n","Epoch 7/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 5ms/step - accuracy: 0.9440 - loss: 0.1316 - val_accuracy: 0.9542 - val_loss: 0.1044\n","Epoch 8/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 4ms/step - accuracy: 0.9469 - loss: 0.1307 - val_accuracy: 0.9612 - val_loss: 0.0939\n","Epoch 9/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 4ms/step - accuracy: 0.9532 - loss: 0.1172 - val_accuracy: 0.9604 - val_loss: 0.0936\n","Epoch 10/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 4ms/step - accuracy: 0.9519 - loss: 0.1145 - val_accuracy: 0.9641 - val_loss: 0.0823\n","Epoch 11/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 4ms/step - accuracy: 0.9572 - loss: 0.1070 - val_accuracy: 0.9535 - val_loss: 0.1048\n","Epoch 12/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 3ms/step - accuracy: 0.9594 - loss: 0.0992 - val_accuracy: 0.9665 - val_loss: 0.0805\n","Epoch 13/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 5ms/step - accuracy: 0.9605 - loss: 0.0955 - val_accuracy: 0.9673 - val_loss: 0.0773\n","Epoch 14/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 3ms/step - accuracy: 0.9629 - loss: 0.0903 - val_accuracy: 0.9689 - val_loss: 0.0764\n","Epoch 15/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 5ms/step - accuracy: 0.9657 - loss: 0.0863 - val_accuracy: 0.9721 - val_loss: 0.0689\n","Epoch 16/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 4ms/step - accuracy: 0.9663 - loss: 0.0831 - val_accuracy: 0.9792 - val_loss: 0.0573\n","Epoch 17/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 3ms/step - accuracy: 0.9687 - loss: 0.0815 - val_accuracy: 0.9736 - val_loss: 0.0631\n","Epoch 18/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 4ms/step - accuracy: 0.9676 - loss: 0.0829 - val_accuracy: 0.9732 - val_loss: 0.0620\n","Epoch 19/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 4ms/step - accuracy: 0.9682 - loss: 0.0810 - val_accuracy: 0.9630 - val_loss: 0.0893\n","Epoch 20/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 4ms/step - accuracy: 0.9681 - loss: 0.0816 - val_accuracy: 0.9784 - val_loss: 0.0528\n","Epoch 21/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 4ms/step - accuracy: 0.9698 - loss: 0.0762 - val_accuracy: 0.9767 - val_loss: 0.0559\n","Epoch 22/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 3ms/step - accuracy: 0.9713 - loss: 0.0734 - val_accuracy: 0.9776 - val_loss: 0.0523\n","Epoch 23/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 4ms/step - accuracy: 0.9708 - loss: 0.0732 - val_accuracy: 0.9746 - val_loss: 0.0649\n","Epoch 24/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 4ms/step - accuracy: 0.9716 - loss: 0.0707 - val_accuracy: 0.9738 - val_loss: 0.0638\n","Epoch 25/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 4ms/step - accuracy: 0.9701 - loss: 0.0732 - val_accuracy: 0.9741 - val_loss: 0.0624\n","Epoch 26/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 4ms/step - accuracy: 0.9719 - loss: 0.0709 - val_accuracy: 0.9741 - val_loss: 0.0620\n","Epoch 27/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 3ms/step - accuracy: 0.9724 - loss: 0.0694 - val_accuracy: 0.9752 - val_loss: 0.0646\n","Epoch 28/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 4ms/step - accuracy: 0.9737 - loss: 0.0665 - val_accuracy: 0.9804 - val_loss: 0.0463\n","Epoch 29/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 3ms/step - accuracy: 0.9750 - loss: 0.0639 - val_accuracy: 0.9722 - val_loss: 0.0762\n","Epoch 30/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 4ms/step - accuracy: 0.9732 - loss: 0.0676 - val_accuracy: 0.9753 - val_loss: 0.0622\n","Epoch 31/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 4ms/step - accuracy: 0.9719 - loss: 0.0681 - val_accuracy: 0.9690 - val_loss: 0.0776\n","Epoch 32/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 3ms/step - accuracy: 0.9735 - loss: 0.0653 - val_accuracy: 0.9741 - val_loss: 0.0636\n","Epoch 33/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 4ms/step - accuracy: 0.9710 - loss: 0.0714 - val_accuracy: 0.9792 - val_loss: 0.0481\n","Epoch 34/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 3ms/step - accuracy: 0.9745 - loss: 0.0645 - val_accuracy: 0.9735 - val_loss: 0.0661\n","Epoch 35/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 4ms/step - accuracy: 0.9741 - loss: 0.0631 - val_accuracy: 0.9764 - val_loss: 0.0608\n","Epoch 36/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 3ms/step - accuracy: 0.9750 - loss: 0.0648 - val_accuracy: 0.9788 - val_loss: 0.0467\n","Epoch 37/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 4ms/step - accuracy: 0.9751 - loss: 0.0636 - val_accuracy: 0.9758 - val_loss: 0.0564\n","Epoch 38/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 4ms/step - accuracy: 0.9707 - loss: 0.0699 - val_accuracy: 0.9535 - val_loss: 0.1235\n","Epoch 39/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 4ms/step - accuracy: 0.9713 - loss: 0.0733 - val_accuracy: 0.9659 - val_loss: 0.0868\n","Epoch 40/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 4ms/step - accuracy: 0.9766 - loss: 0.0588 - val_accuracy: 0.9740 - val_loss: 0.0668\n","Epoch 41/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 3ms/step - accuracy: 0.9728 - loss: 0.0679 - val_accuracy: 0.9813 - val_loss: 0.0468\n","Epoch 42/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 5ms/step - accuracy: 0.9749 - loss: 0.0656 - val_accuracy: 0.9789 - val_loss: 0.0555\n","Epoch 43/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 3ms/step - accuracy: 0.9777 - loss: 0.0579 - val_accuracy: 0.9831 - val_loss: 0.0427\n","Epoch 44/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 4ms/step - accuracy: 0.9770 - loss: 0.0586 - val_accuracy: 0.9774 - val_loss: 0.0550\n","Epoch 45/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 3ms/step - accuracy: 0.9774 - loss: 0.0590 - val_accuracy: 0.9799 - val_loss: 0.0475\n","Epoch 46/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 4ms/step - accuracy: 0.9756 - loss: 0.0606 - val_accuracy: 0.9783 - val_loss: 0.0523\n","Epoch 47/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 4ms/step - accuracy: 0.9775 - loss: 0.0576 - val_accuracy: 0.9852 - val_loss: 0.0375\n","Epoch 48/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 4ms/step - accuracy: 0.9784 - loss: 0.0558 - val_accuracy: 0.9822 - val_loss: 0.0435\n","Epoch 49/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 4ms/step - accuracy: 0.9778 - loss: 0.0547 - val_accuracy: 0.9817 - val_loss: 0.0434\n","Epoch 50/50\n","\u001b[1m2077/2077\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 3ms/step - accuracy: 0.9787 - loss: 0.0582 - val_accuracy: 0.9823 - val_loss: 0.0457\n"]}]},{"cell_type":"markdown","source":["**EVALUATE MODEL**"],"metadata":{"id":"2ohsPEiRVj0Z"}},{"cell_type":"code","source":["test_loss, test_acc = model.evaluate(X_test_prep, y_test, verbose=0)\n","print(f\"Test loss: {test_loss:.4f} | Test acc :{test_acc:.4f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HEL4ksULLyf9","executionInfo":{"status":"ok","timestamp":1760089718442,"user_tz":-480,"elapsed":1037,"user":{"displayName":"Muhammad Andi Ubaidillah","userId":"10941764502761508051"}},"outputId":"896e374a-eca3-4967-bcb7-6ec78cf1471f"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["Test loss: 0.0526 | Test acc :0.9801\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n","y_pred = np.argmax(model.predict(X_test_prep), axis = 1)\n","acc = accuracy_score(y_test, y_pred)\n","print(f\"Akurasi model dengan data pengujian : {acc:.4f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YXJHy7sBhuZ8","executionInfo":{"status":"ok","timestamp":1760090086323,"user_tz":-480,"elapsed":3116,"user":{"displayName":"Muhammad Andi Ubaidillah","userId":"10941764502761508051"}},"outputId":"075fddcf-a3a7-4a0a-bc1f-30507a10f771"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m649/649\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step\n","Akurasi model dengan data pengujian : 0.9801\n"]}]},{"cell_type":"code","source":["print(classification_report(y_test, y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WVvQy3_mMcIO","executionInfo":{"status":"ok","timestamp":1760090124913,"user_tz":-480,"elapsed":37,"user":{"displayName":"Muhammad Andi Ubaidillah","userId":"10941764502761508051"}},"outputId":"a720f504-076b-40aa-f4e9-00c9cb23a888"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.98      0.99      0.98     12667\n","           1       0.98      0.97      0.97      8101\n","\n","    accuracy                           0.98     20768\n","   macro avg       0.98      0.98      0.98     20768\n","weighted avg       0.98      0.98      0.98     20768\n","\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","label = ['Normal','DDoS']\n","cm = confusion_matrix(y_test, y_pred)\n","plt.figure(figsize=(6,5))\n","sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n","            xticklabels=label,\n","            yticklabels=label)\n","plt.xlabel('Predicted Label')\n","plt.ylabel('True Label')\n","plt.title('Confusion Matrix')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":487},"id":"Zr1eWtOEMyPr","executionInfo":{"status":"ok","timestamp":1760090272259,"user_tz":-480,"elapsed":1867,"user":{"displayName":"Muhammad Andi Ubaidillah","userId":"10941764502761508051"}},"outputId":"6aba9924-0c10-46e3-eb52-f92bc45ecd70"},"execution_count":27,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x500 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["model.save(\"MLP_Detection_DDoS.keras\")"],"metadata":{"id":"yVitMXx6Nfjk","executionInfo":{"status":"ok","timestamp":1760090449382,"user_tz":-480,"elapsed":91,"user":{"displayName":"Muhammad Andi Ubaidillah","userId":"10941764502761508051"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["from google.colab import files\n","\n","files.download('MLP_Detection_DDoS.keras')"],"metadata":{"id":"ITAARfbTOqxL","executionInfo":{"status":"ok","timestamp":1760090453763,"user_tz":-480,"elapsed":37,"user":{"displayName":"Muhammad Andi Ubaidillah","userId":"10941764502761508051"}},"colab":{"base_uri":"https://localhost:8080/","height":17},"outputId":"ad353d33-7d58-4714-e0a5-97d4e58b792b"},"execution_count":30,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_efb9044c-2941-4fe7-8bf6-a4ed469a9dff\", \"MLP_Detection_DDoS.keras\", 356068)"]},"metadata":{}}]}]}